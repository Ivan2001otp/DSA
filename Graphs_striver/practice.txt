Try to solve Biweekly contest 160

int minimumEffortPath(vector<vector<int>> &heights)
{

        priority_queue<
           pair<int, pair<int, int>>,
                       vector<pair<int, pair<int, int>>>,
                       greater<pair<int, pair<int, int>>>>
            pq;

        int n = heights.size();
        int m = heights[0].size();

       
        vector<vector<int>> dist(n, vector<int>(m, 1e9));
        dist[0][0] = 0;
        pq.push({0, {0, 0}});

        vector<vector<int>>dirs = {{0,1},{0,-1},{1,0},{-1,0}};
        

      
        while (!pq.empty())
        {
            auto it = pq.top();
            pq.pop();
            int diff = it.first;
            int row = it.second.first;
            int col = it.second.second;

            
            if (row == n - 1 && col == m - 1)
                return diff;
           
            for (auto dir : dirs)
            {
                
                int newr = row + dir[0];
                int newc = col + dir[1];

                // Checking validity of the cell.
                if (newr >= 0 && newc >= 0 && newr < n && newc < m)
                {
                    
                    int newEffort = max(abs(heights[row][col] - heights[newr][newc]), diff);

                    if (newEffort < dist[newr][newc])
                    {
                        dist[newr][newc] = newEffort;
                        pq.push({newEffort, {newr, newc}});
                    }
                }
            }
        }
        return 0;
}